import telebot
from telebot import types
from app.dependencies import supabase
from dotenv import load_dotenv
import os
import random
import bcrypt

load_dotenv()

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π)
TOKEN =  os.getenv("TELEGRAM_API_TOKEN")
bot = telebot.TeleBot(TOKEN, skip_pending=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º"
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    share_button = types.KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è", request_contact=True)
    markup.add(share_button)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è¬ª, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç.",
        reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
@bot.message_handler(content_types=['contact'])
def handle_contact(message):
    send_code(message)
    
def send_code(message):
    try:
        phone_number = message.contact.phone_number
        
        response = supabase.table("verify_codes") \
            .select("id") \
            .eq("phone_number", phone_number) \
            .eq("type_auth", "Telegram") \
            .execute()
        
        if not response.data:
            bot.send_message(
            message.chat.id,
            "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é Telegram.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µüì≤",
            )
            return

        code = str(random.randint(10000, 99999)).encode('utf-8') # —Ñ–æ—Ä–º–∞—Ç b'12345'
        update_response = supabase.table("verify_codes") \
            .update({"code": str(bcrypt.hashpw(code, bcrypt.gensalt()))}) \
            .eq("phone_number", phone_number) \
            .execute()

        bot.send_message(
            message.chat.id,
            f"–í–∞—à –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: *{code.decode('utf-8')}*",
            parse_mode='MarkdownV2'
        )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {e}")
        bot.send_message(
            message.chat.id,
            "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é Telegram.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µüì≤",
        )
# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
def start_bot():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.polling(none_stop=True)